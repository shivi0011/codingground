Compute the minimum (min) or maximum (max) of two/three/four.. integers without branching[

Method 1:
=====================
int x;  // we want to find the minimum of x and y
int y;   
int r;  // the result goes here 

r = y ^ ((x ^ y) & -(x < y)); // min(x, y)
On some rare machines where branching is very expensive and no condition move instructions exist, the above expression might be faster than the obvious approach, r = (x < y) ? x : y, even though it involves two more instructions. (Typically, the obvious approach is best, though.) It works because if x < y, then -(x < y) will be all ones, so r = y ^ (x ^ y) & ~0 = y ^ x ^ y = x. Otherwise, if x >= y, then -(x < y) will be all zeros, so r = y ^ ((x ^ y) & 0) = y. On some machines, evaluating (x < y) as 0 or 1 requires a branch instruction, so there may be no advantage.
To find the maximum, use:

r = x ^ ((x ^ y) & -(x < y)); // max(x, y)

Method 2:
=======================
int x=2,y=5;
x - (x - y) -- will give you y  -- can be max
y + (x - y) -- will give you x  -- can be min

x = x - ( (x-y) & (x-y)>>31 );		//***
y = y + ( (x-y) & (x-y)>>31 );		//***

---for 3---
findMin(x,findMin(y,z));
----for 4----
findMin(w,findMin(x,findMin(y,z)));
]
Determining if an integer is a power of 2[

unsigned int v; // we want to see if v is a power of 2
bool f;         // the result goes here 

f = (v & (v - 1)) == 0;
Note that 0 is incorrectly considered a power of 2 here. To remedy this, use:
f = v && !(v & (v - 1));
]
Detect if two integers have opposite signs[

int x, y;               // input values to compare signs

bool f = ((x ^ y) < 0); // true iff x and y have opposite signs

OR -- geeks
------
We can also use following method. It doesn’t use any comparison operator. The method is suggested by Hongliang and improved by gaurav.

bool oppositeSigns(int x, int y)
{
    return ((x ^ y) >> 31);
}
The function is written only for compilers where size of an integer is 32 bit. The expression basically checks sign of (x^y) using bitwise operator ‘>>’. As mentioned above, the sign bit for negative numbers is always 1. The sign bit is the leftmost bit in binary representation. So we need to checks whether the 32th bit (or leftmost bit) of x^y is 1 or not. We do it by right shifting the value of x^y by 31, so that the sign bit becomes the least significant bit. If sign bit is 1, then the value of (x^y)>>31 will be 1, otherwise 0.
]
Find XOR of two number without using XOR operator[ TC - O(1) and SC - O(1)  -- >>Digital wala XOR<< 
A Better Solution can find XOR without using loop.

1) Find bitwise OR of x and y (Result has set bits where either x has set or y has set bit). OR of x = 3 (011) and y = 5 (101) is 7 (111)
2) To remove extra set bits find places where both x and y have set bits. The value of expression “~x | ~y” has 0 bits wherever x and y both have set bits.
3) bitwise AND of “(x | y)” and “~x | ~y” produces the required result.

// C++ program to find XOR without using ^
#include <iostream>
using namespace std;
 
// Returns XOR of x and y
int myXOR(int x, int y)
{
   return (x | y) & (~x | ~y);     //ye digital wale xor ka formula hi hai..  a^b = ~a * b + a * ~b
   return ~x*y + x*~y;   //this is also correct
}																

// Driver program to test above function
int main()
{
   int x = 3, y = 5;
   cout << "XOR is " << myXOR(x, y);
   return 0; 
}

Normal Sol
---------------
int myXOR(int x, int y)
{
    int res = 0; // Initialize result
     
    // Assuming 32-bit Integer 
    for (int i = 31; i >= 0; i--)                     
    {
       // Find current bits in x and y
       bool b1 = x & (1 << i);   //ith bit will be in b1
       bool b2 = y & (1 << i);
        
        // If both are 1 then 0 else xor is same as OR
        bool xoredBit = (b1 & b2) ? 0 : (b1 | b2);          
 
        // Update result
        res <<= 1;
        res |= xoredBit;
    }
    return res;
}
]
Add two numbers without using arithmetic operators[ -- Digital wala >>Half Adder<<---
int Add(int x, int y)
{
    // Iterate till there is no carry  
    while (y != 0)
    {
        // carry now contains common set bits of x and y
        int carry = x & y;  
 
        // Sum of bits of x and y where at least one of the bits is not set
        x = x ^ y; 
 
        // Carry is shifted by one so that adding it to x gives the required sum
        y = carry << 1;
    }
    return x;
}
========
int Add(int x, int y)
{
    if (y == 0)
        return x;
    else
        return Add( x ^ y, (x & y) << 1);	//we need to shift the carry by 1 as the carry has to be added in the next bit
}
]
Square root of an integer
Swap all odd and even bits[ -- make int as unsigned as we're working over 32 bits not on signs
unsigned int swapOddEvenBits(unsigned int a)
{
unsigned int even = a & 0xAAAAAAAA;	// means 10101010
unsigned int odd = a & 0x55555555;	//means  01010101

return (even>>1 | odd<<1) ;		//even wale ko odd pe le jao and odd wale ko even position pe
}

int main()
{
unsigned int x = 23;
printf("%u\n",swapOddEvenBits(x));
return 0;
}
]
Check if binary representation of a number is palindrome[
int checkPalindrome(int a)
{
int length = ceil(log(a)/log(2));

while(length>=1)
{
	int lastbit = a & 1;
	int firstbit = 1 & (a >> (length-1));

	if(firstbit!=lastbit)
	{
	return 0;
	}
	a >>= 1;
	length -= 2; 
}
return 1;
}
]
Add two numbers using bits[
int addBitStrings(int a,int b)
{
int sum, carry;

if(b==0)
return a;

sum = a^b;
carry = a&b;
addBitStrings(sum,carry<<1);
}
]
Write an Efficient Method to Check if a Number is Multiple of 3[  --just find odd_bit_count - even_bit_count
Algorithm: isMutlipleOf3(n)  ---- complexity - O(log n)
1) Make n positive if n is negative.
2) If number is 0 then return 1
3) If number is 1 then return 0
4) Initialize: odd_count = 0, even_count = 0
5) Loop while n != 0
    a) If rightmost bit is set then increment odd count.
    b) Right-shift n by 1 bit
    c) If rightmost bit is set then increment even count.
    d) Right-shift n by 1 bit
6) return isMutlipleOf3(odd_count - even_count)

int checkNum(int num)
{
if(num<0) num = -num;
if(num==0) return 1;
if(num==1) return 0;

int oddCount=0,evenCount=0;

while(num!=0)
{
	if(num & 1) oddCount++;

	num >>= 1;

	if(num & 1) evenCount++;

	num >>= 1;
}
return checkNum(abs(oddCount-evenCount));		//differnce is multiple of 3 or not? to check this also use the same algo
}
]
Write one line C function to find whether a no is power of two[
1. All power of two numbers have only one bit set. So count the no. of set bits and if you get 1 then number is a power of 2.
2. A simple method for this is to simply take the log of the number on base 2 and if you get an integer then number is power of 2.
3. Another solution is to keep dividing the number by two, i.e, do n = n/2 iteratively. In any iteration, if n%2 becomes non-zero and n is not 1 then n is not a   power of 2. If n becomes 1 then it is a power of 2.
4.
bool isPowerOfTwo (int x)
{
/* First x in the below expression is for the case when x is 0 */
return x && (!(x&(x-1)));  
}
int main()
{
isPowerOfTwo(9)? printf("Yes\n"): printf("No\n");
return 0;
}
]
How to turn off a particular kth bit from right in a number?[n & ~(1<<(k-1))]
Swap two numbers without using temp variable[ *INLINE SWAP*
a^=b^a=b^a=b;

which is 
a = a^b;
b = b^a;
a = a^b;
----

x = x ^ y ^ (y = x);
OR
x = x + y - (y = x);
]
How do you set, clear and toggle a single bit in C/C++?[
Setting a bit

Use the bitwise OR operator (|) to set a bit.

number |= 1 << x;
That will set bit x.

Clearing a bit

Use the bitwise AND operator (&) to clear a bit.

number &= ~(1 << x);
That will clear bit x. You must invert the bit string with the bitwise NOT operator (~), then AND it.

Toggling a bit

The XOR operator (^) can be used to toggle a bit.

number ^= 1 << x;
That will toggle bit x.

Checking a bit

You didn't ask for this but I might as well add it.

To check a bit, shift the number x to the right, then bitwise AND it:

bit = (number >> x) & 1;
That will put the value of bit x into the variable bit.

Changing the nth bit to x

Setting the nth bit to either 1 or 0 can be achieved with the following:

number ^= (-x ^ number) & (1 << n);
Bit n will be set if x is 1, and cleared if x is 0.

]


