29 Jul

Find minimum difference between any two elements -- nlogn (use qsort fn)
Count Strictly Increasing Subarrays-- use n*(n-1)/2 concept where n is the length of strictly increasing sequence

=======================
	  Binary Tree
=======================
http://www.geeksforgeeks.org/618/  watch video
	Binary Tree Introduction
Handshaking Lemma and Interesting Tree Properties
	Binary Tree Properties
	Types of Binary Tree
Enumeration of Binary Tree
	Applications of tree data structure
	Tree Traversals		***
		>>>>BFS vs DFS for Binary Tree[
		BFS means LOT (Level Order Traversal)
		and DFS means -- Preorder, Inorder, Postorder
		]		
Level Order Tree Traversal[
#include<stdio.h>
#include<stdlib.h>

struct node 
{
	int data;
	struct node *left,*right;
};

typedef struct node Node;

Node *newNode(int data)
{
	Node *node = (Node*)malloc(sizeof(Node));
	node->data = data;
	node->left = node->right = NULL;
	
return node;
}

int max(int a,int b)
{
return a>b?a:b;
}

int height(Node *root)
{
if(root==NULL) return 0;
return 1+max(height(root->left),height(root->right));
}

void printGivenLevel(Node *root, int level)
{
	if(root==NULL) return;

	if(level==1) printf("%d ",root->data);

	else if(level>1)
	{
		printGivenLevel(root->left,level-1);
		printGivenLevel(root->right,level-1);	
	}
}

void printLOT(Node *root)
{
int h = height(root);

	for(int i=1;i<=h;i++)
	{
		printGivenLevel(root,i);
		printf("\n");
	}
}

int main()
{
Node *root=NULL;
root = newNode(50);
root->left = newNode(7);
root->right = newNode(2);
root->left->left = newNode(3);
root->left->right = newNode(5);
root->right->left = newNode(1);
root->right->right = newNode(30);

printLOT(root);
return 0;
}
=============================================
Go for this one ---- using queue ***
complexity of below solution is O(#f elements in tree) ie. O(n) as we're accessing each element max once only
void printLOT(Node *root)
{
queue<Node*> Q;

Q.push(root);
while(1)
{
	int count = Q.size();
	if(count==0) break;	//this is the point to remember
	while(count>0)
	{
	Node *current = Q.front();			//now everything u hv to do with current only forget abt the root
	cout<<current->data << " ";
	Q.pop();
	if(current->left) Q.push(current->left);
	if(current->right) Q.push(current->right);
	count--;
	}
	cout<<endl;
}
}
]
Print level order traversal line by line[ same as above
]
Inorder Tree Traversal without Recursion[
ie. recursion we cant use...means implicit stack we cant use... so use explicit stack STL
]
Inorder Tree Traversal without recursion and without stack!
Threaded Binary Tree
	Size of a tree -- means number of nodes in tree
Determine if Two Trees are Identical
Maximum Depth or Height of a Tree
Write a C program to Delete a Tree.
Write an Efficient C Function to Convert a Binary Tree into its Mirror Tree
If you are given two traversal sequences, can you construct the binary tree?
Given a binary tree, print out all of its root-to-leaf paths one per line.
The Great Tree-List Recursion Problem.
Count leaf nodes in a binary tree[
1. from main pass the address of count
void countLeafNodes(Node *root,int *count)
{
//static int count=0;  //in order to retain the value b/w the recursive fn calls make it static
if(root==NULL)
return ;

if(root->left==NULL && root->right==NULL)
(*count)++;

else
{
	countLeafNodes(root->left,count);
	countLeafNodes(root->right,count);	
}
}
2.
void countLeafNodes(Node *root)
{
static int count=0;  //in order to retain the value b/w the recursive fn calls make it static
if(root==NULL)
return ;

if(root->left==NULL && root->right==NULL)
count++;

else
{
	countLeafNodes(root->left,count);
	countLeafNodes(root->right,count);	
}
}
3.  geeks's solution
unsigned int getLeafCount(struct node* node)		//return type should be unsigned int as count can not be -ve
{
  if(node == NULL)       
    return 0;
  if(node->left == NULL && node->right==NULL)      
    return 1;            
  else
    return getLeafCount(node->left)+
           getLeafCount(node->right);      
}
]
Level order traversal in spiral form
Check for Children Sum Property in a Binary Tree.[
boolean isSumProperty(Node node) 
{
if(node==null || (node.left==null && node.right==null))	return true;
return (isSumProperty(node.left) && isSumProperty(node.right) && 
        (node.data == ((node.left==null ? 0 : node.left.data)+(node.right==null ? 0 : node.right.data)))
		);
}
]
Convert an arbitrary Binary Tree to a tree that holds Children Sum Property[ ** Amazon interview
void convertTree(Node *root)
{
	int left=0, right=0, diff; //initially left_data and right_data are 0
	
	if(root==NULL) return;
	
	if(root->left==NULL && root->right==NULL)
	return;
	
	else
	{
		convertTree(root->left);			//recursive calls hamesha pehle rakhte hain bcz hum last se start karte hain
		convertTree(root->right);
		
		if(root->left!=NULL)
		left = root->left->data;
		 
		if(root->right!=NULL)
		right = root->right->data;
		 
		 diff = left + right - root->data;
	
		if(diff > 0)
		root->data = root->data + diff;
	
		else if(diff < 0)
		increment(root, -diff);
	}
}
void increment(Node *root, int diff)
{
	if(root->left!=NULL)		//agar left child ho to usme add kr do value (diff barabar wali) to make left+right > root->data
	{
	root->left->data = root->left->data + diff;
	increment(root->left,diff);
	}
	else if(root->right!=NULL)	//agar right child ho to usme add kr do....kisi ek me hi add karne ki zaroorat h...
	{
	root->right->data = root->right->data + diff;
	increment(root->right,diff);
	}
}
]
Diameter of a Binary Tree
How to determine if a binary tree is height-balanced?
Root to leaf path sum equal to a given number [  --SAME--
a[] is an extra array taken to store the max path from root to leaf --- so SC - O(log n)  and TC - O(n)
call in main -- pathSum(a,0,sum); with sum = some value

void pathSum(Node *root,int a[],int i,int sum)
{
if(root==NULL) return;

a[i++] = root->data;

if(sum-root->data==0 && root->left==NULL && root->right==NULL)
printArray(a,i);

else
{	
	pathSum(root->left,a,i,sum-root->data);
	pathSum(root->right,a,i,sum-root->data);
}
}
]
Construct Tree from given Inorder and Preorder traversals
Given a binary tree, print all root-to-leaf paths[  --SAME--

void printPaths(Node *root,int a[],int i)
{
if(root==NULL) return;

a[i++] = root->data;

if(root->left==NULL && root->right==NULL) //jab leaf pe pahuch jaye to print path
printArray(a,i);		//print array till i

else
{
	printPaths(root->left,a,i);
	printPaths(root->right,a,i);
}
}
]
Double Tree
Maximum width of a binary tree			-- DO IT
Foldable Binary Trees
Print nodes at k distance from root
Get Level of a node in a Binary Tree
Print Ancestors of a given node in Binary Tree
Check if a given Binary Tree is SumTree
Check if a binary tree is subtree of another binary tree
Connect nodes at same level
Connect nodes at same level using constant extra space
Populate Inorder Successor for all nodes
Convert a given tree to its Sum Tree
Vertical Sum in a given Binary Tree
Find the maximum sum leaf to root path in a Binary Tree
Construct Special Binary Tree from given Inorder traversal
Construct a special tree from given preorder traversal
Check whether a given Binary Tree is Complete or not
A program to check if a binary tree is BST or not[ **
mtcodeschool -- only for unique values 
bool utilfn(Node *root,int min,int max)
{
	if(root==NULL) return true;
	
	if(root->data > min && root->data < max && 
	   utilfn(root->left,min,root->data) && 
	   utilfn(root->right,root->data,max))
	   return true;
	else
	return false;	
}

void checkBinaryTree(Node *root)
{
	int a = utilfn(root,INT_MIN,INT_MAX);
	printf("%d\n",a);
	if(a) printf("Given tree is BST\n");
	else
	printf("Not a BST\n");
}
INPLACE solution using INORDER
-----------------------------------

]
Boundary Traversal of binary tree
Construct Full Binary Tree from given preorder and postorder traversals
Iterative Preorder Traversal[

]
Morris traversal for Preorder
Linked complete binary tree & its creation
Ternary Search Tree
Largest Independent Set Problem
Iterative Postorder Traversal | Set 1 (Using Two Stacks)
Iterative Postorder Traversal | Set 2 (Using One Stack)
Reverse Level Order Traversal
Construct Complete Binary Tree from its Linked List Representation
Convert a given Binary Tree to Doubly Linked List | Set 1
Tree Isomorphism Problem
Find all possible interpretations of an array of digits
Iterative Method to find Height of Binary Tree
Custom Tree Problem
Convert a given Binary Tree to Doubly Linked List | Set 2
Print ancestors of a given binary tree node without recursion
Difference between sums of odd level and even level nodes of a Binary Tree
Print Postorder traversal from given Inorder and Preorder traversals
Find depth of the deepest odd level leaf node
Check if all leaves are at same level
Print Left View of a Binary Tree[
my code
void printLeft(Node *root)
{
static int flag=0;
if(root==NULL) return;
if(flag==0) printf("%d ",root->data);
if(root->left) { flag=0; printLeft(root->left);}
if(root->right) {flag=1; if(root->left==NULL)flag=0; printLeft(root->right);}
}
]
Remove all nodes which don’t lie in any path with sum>= k
Extract Leaves of a Binary Tree in a Doubly Linked List
Deepest left leaf node in a binary tree
Find next right node of a given key
Sum of all the numbers that are formed from root to leaf paths
Convert a given Binary Tree to Doubly Linked List | Set 3
Lowest Common Ancestor in a Binary Tree | Set 1
Find distance between two given keys of a Binary Tree
Print all nodes that are at distance k from a leaf node
Check if a given Binary Tree is height balanced like a Red-Black Tree,
Print all nodes at distance k from a given node
Print a Binary Tree in Vertical Order | Set 1[ *** asked in Amazon - BrowserStack - Dell - Flipkart - Grofers - Netskope
Algorithm:
-----------
// min --> Minimum horizontal distance from root
// max --> Maximum horizontal distance from root
// hd  --> Horizontal distance of current node from root 
findMinMax(tree, min, max, hd)
     if tree is NULL then return;
 
     if hd is less than min then
           min = hd;
     else if hd is greater than max then
           max = hd;
 
     findMinMax(tree->left, min, max, hd-1);
     findMinMax(tree->right, min, max, hd+1);

 
printVerticalLine(tree, line_no, hd)
     if tree is NULL then return;
 
     if hd is equal to line_no, then
           print(tree->data);
     printVerticalLine(tree->left, line_no, hd-1);
     printVerticalLine(tree->right, line_no, hd+1); 
	 
       0   1
        /     \
    -1 2       3 +1
      / \     / \
  -2 4   5 0 6   7 +2
             \   \
              8   9 +3 
//finding the min and max height of tree
void findMinMax(Node *root, int *min, int *max, int hd)	//hd - horizontal distance
{
	if(root==NULL) return;
	
	if(hd < *min)  *min = hd;
	else if(hd > *max)  *max = hd;
	
	findMinMax(root->left, min, max, hd-1);//min max r already address so no need to use &
	findMinMax(root->right, min, max, hd+1);
}

void printVertical(Node *root, int lineNo, int hd)
{
	if(root==NULL) return;
	
	if(hd == lineNo) printf("%d ",root->data);
	
	printVertical(root->left, lineNo, hd-1);
	printVertical(root->right, lineNo, hd+1);
}

void verticalOrder(Node *root)
{
int min=0, max=0;
findMinMax(root,&min,&max,0);

for(int lineNo=min; lineNo<=max; lineNo++)
{
	printVertical(root,lineNo,0);
	cout<<endl;
}
}

int main()
{
	verticalOrder(root);
}
]
Construct a tree from Inorder and Level order traversals
Find the maximum path sum between two leaves of a binary tree
Reverse alternate levels of a perfect binary tree
Check if two nodes are cousins in a Binary Tree
Check if a binary tree is subtree of another binary tree | Set 2
Serialize and Deserialize a Binary Tree
Print nodes between two given level numbers of a binary tree
closest leaf in a Binary Tree
Convert a Binary Tree to Threaded binary tree
Print Nodes in Top View of Binary Tree
Bottom View of a Binary Tree
Perfect Binary Tree Specific Level Order Traversal
Convert left-right representation of a bianry tree to down-right
Minimum no. of iterations to pass information to all nodes in the tree
Clone a Binary Tree with Random Pointers
Given a binary tree, how do you remove all the half nodes?
Vertex Cover Problem | Set 2 (Dynamic Programming Solution for Tree)
Check whether a binary tree is a full binary tree or not
Find sum of all left leaves in a given Binary Tree
Remove nodes on root to leaf paths of length < K
Find Count of Single Valued Subtrees
Check if a given array can represent Preorder Traversal of Binary Search Tree
Mirror of n-ary Tree
Find multiplication of sums of data of leaves at sane levels
Succinct Encoding of Binary Tree
Construct Binary Tree from given Parent Array representation
Symmetric Tree (Mirror Image of itself)
Find Minimum Depth of a Binary Tree
Maximum Path Sum in a Binary Tree
Expression Tree
Check whether a binary tree is a complete tree or not | Set 2 (Recursive Solution)
Change a Binary Tree so that every node stores sum of all nodes in left subtree
Iterative Search for a key ‘x’ in Binary Tree
 Find maximum (or minimum) in Binary Tree