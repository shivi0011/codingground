To see how many cores you have in your system, try this:

grep 'processor.*:' /proc/cpuinfo | wc -l 

To check the free disk space
 df -h 
 
When the compiler sees the start of the parallel region, it creates a pool of threads. When the program runs, these threads start executing, and are controlled by what information is in the hints. Without additional hints, we simply have a “bunch” or “bag” of threads.

A way to visualize this is to imagine an implicit loop around your parallel region, where you have N CPU/core iterations of the loop. These iterations all occur at the same time, unlike an explicit loop.

The number of cores is controlled by an environment variable, OMP_NUM_THREADS. If it is not set, it could default to 1 or the number of cores on your machine. Just to be sure, you may want to do the following.

export OMP_NUM_THREADS=`grep 'processor' /proc/cpuinfo | wc -l `

#include "stdio.h" 
int main(int argc, char *argv[])
{
  #pragma omp parallel
  {
    printf("hello multicore user!\n");
  }
  return(0);
}

By adjusting the value of the OMP_NUM_THREADS environment variable, we can adjust the number of execution threads.

If we set 1 thread, we get, one print statement.

#include "stdio.h"
#include <omp.h>

int main(int argc, char *argv[])
{
  #pragma omp parallel
  {
    int NCPU,tid,NPR,NTHR;
    /* get the total number of CPUs/cores available for OpenMP */
    NCPU = omp_get_num_procs();
    /* get the current thread ID in the parallel region */
    tid = omp_get_thread_num();
    /* get the total number of threads available in this parallel region */
    NPR = omp_get_num_threads();
    /* get the total number of threads requested */
    NTHR = omp_get_max_threads();
    /* only execute this on the master thread! */
    if (tid == 0) {
      printf("%i : NCPU\t= %i\n",tid,NCPU);
      printf("%i : NTHR\t= %i\n",tid,NTHR);
      printf("%i : NPR\t= %i\n",tid,NPR);
    }
    printf("%i : hello multicore user! I am thread %i out of %i\n",tid,tid,NPR);
  }
return(0);
}

============================https://www.dartmouth.edu/~rc/classes/intro_openmp=======================================
(7) Example of Parallelizing a Loop
#include <omp.h>
#include <stdio.h>
#include <stdlib.h>
#define N       100

int main (int argc, char *argv[]) {

int nthreads, tid, i;
float a[N], b[N], c[N];

/* Some initializations */
for (i=0; i < N; i++)
  a[i] = b[i] = i;


#pragma omp parallel shared(a,b,c,nthreads) private(i,tid)
  {
  tid = omp_get_thread_num();
  if (tid == 0)
    {
    nthreads = omp_get_num_threads();
    printf("Number of threads = %d\n", nthreads);
    }

  printf("Thread %d starting...\n",tid);

  #pragma omp for 
  for (i=0; i<N; i++)
    {
    c[i] = a[i] + b[i];
    printf("Thread %d: c[%d]= %f\n",tid,i,c[i]);
    }

  }  /* end of parallel section */

}

omp_get_thread_num() - get the thread rank in a parallel region (0- omp_get_num_threads() -1)
omp_set_num_threads(nthreads) - set the number of threads used in a parallel region
omp_get _num_threads() - get the number of threads used in a parallel region

Note that in general the rank output are not in order.

export OMP_NUM_THREADS=2

(10) OpenMP Clauses 
     1. firstprivate
     2. lastprivate
     3. ordered

firstprivate
-----------------
    initialize a variable from the serial part of the code
    private clause doesn't initialize the variable

 j = jstart;
#pragma omp parallel for firstprivate(j)
{
   for(i=1; i<=n; i++){
      if(i == 1 || i == n)
         j = j + 1;
      a[i] = a[i] + j;
   }
}

lastprivate
--------------
    thread that executes the ending loop index copies its value to the master (serial) thread
    this gives the same result as serial execution
#pragma omp parallel for lastprivate(x)
{
   for(i=1; i<=n; i++){
      x = sin( pi * dx * (float)i );
      a[i] = exp(x);
   }
}
lastx = x;

ordered
-------------
    used when part of the loop must execute in serial order
    ordered clause plus an ordered directive
#pragma omp parallel for private(myval) ordered
{
   for(i=1; i<=n; i++){
      myval = do_lots_of_work(i);
      #pragma omp ordered
      {
         printf("%d %d\n", i, myval);
      }
   }
}

(11) Reduction Clause
An example of a reduction operation is a summation:
for(i=1; i<=n; i++)
{
   sum = sum + a[i];
}
How reduction works:

    sum is the reduction variable
    cannot be declared shared
        threads would overwrite the value of sum
    cannot be declared private
        private variables don't persist outside of parallel region
    specified reduction operation performed on individual values from each thread

C/C++  Reduction Operands
------------------------
Operator	Initial value
+	         0
*	         1
-		        0
&		       ~0
|		        0
^		        0
&&		       1
||	0







