- multi threading requirements must be understood
- multi threading related concepts must be understood 
- multi threading related programming 
- multi threading related programming issues
- process vs multithreading 
- multi threading related OS arch. and implementation  

-  multithreading provides lighter and faster multitasking
   within a process or an application !!!
-  unlike multiple process based multi tasking at system level, 
   multiple thread based multitasking within an application
   is more decided and dictated by the developer !!!
     - developer decides whether to implement multi threading
       in an application
     - developer decides how many threads to implement in 
       an application and the responsibilities of the threads !!!  


- use ps command as below to see the multithreaded behaviour 
  of processes/applications, in your system :

      ps -C name1,name2,name3  -o nlwp,lwp,pid,ppid,cmd,stat  

      lwp - light weight process - in this context,
            it is the thread id 
      nlwp - no of threads in this process 
      other fields are the same as for processes and 
      interpret them as required !!!
      refer to manual page of  ps   



- modify the ps command options as needed  


- in the above cases, if you try to list the characteristics of 
  soffice.bin and analyse the ps information, you may get the following:
    - state of the process is based on state of all threads of the
      process - for instance, if all threads are blocked, process
      is said to be blocked
    - if all threads are stopped, process is said to be stopped -
      in fact, we used "kill -SIGSTOP <pid>" for a multithreaded
      process !!! in this case, kill command is still used to 
      target a process and it ends up stopping the threads of the
      process - we will understand the implementation after studying 
      the concepts and design !!!
    - if we terminate a multithreaded process using "kill -SIGKILL <pid>",
      all threads of the process are terminated and process is terminated !!!

- what about size of the process and threads ??
    - it is difficult to pin point size of a thread - 
      you may try ??
    - size of a process is sum of sizes of threads - 
      size of a thread is based on the memory resources 
      used by  a thread !!! 

- what about virtual address space of the process and threads ??

    - virtual address space is shared and used as needed, 
      cautiously !!!
    - see the diagram in day1's slides !!!
    - code,data,heap, shared library and shared memory  is shared
      and used as needed - it is the responsibility of the 
      developers to ensure that conflict between threads 
      do not arise !!!!
    - user-space is not shared and allocated delicately 
      from the shared stack virtual address space
    - inside the system, a system stack is allocated per
      thread !!!1 we will understand this more during 
      threading architecture !!!!  



- what about physical memory of the process and threads ??

    - most of the point mentioned above apply here as well -
      meaning, page frames are closely tied to virtual pages
      - in turn tied to virtual address space !!!!

Note : in most of the discussion below, we assume uniprocessor
       systems !!! when needed, we will also assume multiprocessor
       systems !!!

1. why do we need multi-threading in an application / program ??

   - increase responsiveness of an application/program !!!
     - an example may a web browser that can work with
       multiple sites with multiple tabs - still, respond
       to user's actions for one or more tabs - this is 
       achieved via multithreading !!! firefox is a good example -
       chrome is a good example !!! 
     - another example is openoffice in Linux !!

     - in what way does multithreading(multiple threads in a process)
       improve responsiveness of a process ???

       - can a multithreaded process which is busy doing some 
         other activity be woken up to user's request , 
         but not with a signal !!!!
            - let us assume all threads but one are in blocked
              state for certain I/O events !!!
            - let us assume one thread is waiting for user input !!1
            - the moment user-input is given, the last thread
              will wake up and take approrpriate action - this
              is how multithreading may bring responsiveness to a 
              process !!!



   - how does multi-threading improve the responsiveness of 
     a process/application/program ???

     - before concluding on the above question, let us look 
       a few examples :
         - what happens, when you are closing an active
           tab of a browser ??
            - the backing thread(s) can be independently 
              terminated - this is a form of responsiveness!!!
            - in this case, termination of these threads 
              will almost immediate and will not affect 
              the other threads of the process !!!
         - what happens, when you are opening an active
            tab of a browser ??
            - one or more backing threads may be created
            - these threads may initiate their own network 
              I/O - if network I/O can supply data immediately
              these threads will complete their work immediately -
              this is responsiveness - this can almost happen
              in the presence of other active tabs, in most 
              cases, unless system is overloaded and current 
              tab is not provided enough CPU cycles  

         - what happens, when you launching a spell checker
           from openoffice ??
             - another activity can still be initiated !!! 

         - what happnes when you are controlling volume/
           brightness of a media player, when you playing
           some video file ??
             - a thread responds to our actions and 
               this does not affect the behaviour of 
               other threads in the application !!!
             - what was the thread(s) doing when we are
               not initiating any action ??? thread(s)
               were blocked, normally - they will 
               respond when an I/O event is generated !!!
               after responding to an I/O event, they will
               again block !!1

 - in most cases,threads of a process may be independent -
   meaning, a thread has no relationship to another thread -
   or, there is a possibility of interaction, also - it
   depends mostly on the developer - irrespective of the above, 
   system treats threads as independent schedulable entities -
   meaning, system can indepedently block  a thread, wake up a
   thread or schedule a thread !!! if threads of a process are
   related and due to certain relationship they are not responding,
   do not blame the system and multithreading !!! 
-  most of the above statements are also true for a multi processor 
   system !!!



2. how do we achieve multi-threading in a process/ application / program ??

   - breaking a program/application into smaller pieces of 
     code, which are based on specific tasks within the application 
     /program  - responsibility of the developer 

   - share libraries of a process (anyway, processes share shared 
                                   libraries !!!) 
          - shared virtual address space / shared virtual pages !!!

   - the first thread of a process is known as main thread and
     is always created by the operating system during process
     creation !!! this main thread is invariably the controlling
     thread of an application from the application's perspective !!! 
            - second part is developer's responsibility !!!


   - main thread will have its own user-space stack - normal
     and created by system !!!


   - other additional threads will be created by the operating 
     system, if application requests - for each such additional
     thread, a new user-space stack is created !!!
          - there are system call APIs and library APIs for 
            thread creation !!! library APIs are more popular !!!


   - main thread and additional threads are provided with 
     individual kernel stacks/system stacks 

   - virtual address space of the process is shared by all 
     the threads of the process
   - due to the above, page-frames mapping the virtual address
     space of a process are shared among threads of a process !!!
   - code,data,heap and most other sections of a process are
     shared and visible for all threads - although stacks of 
     all threads are visible to all threads, a thread must 
     not interfere with stack of another thread - if it does so,
     it will compromise the existence/execution of the other thread
       - what will happen, if there is interference of threads
         via stacks ??? all threads and process will be terminated !!!


   - even if code,data,heap and most other sections are visible 
     to all threads, each thread must follow rules of the application 
     and rules of concurrency / race-condition, where applicable !!!
  
        - threads of a process can exchange data / communicate
          using just the data area, heap area and anonymous
          area - anonymous area is a special form of dynamic memory -
          it is more popular in modern systems than heap area !!! 
              - how do we create anon areas(anonymous) areas ??
                   mmap() !!!
        - how to handle race conditions, in the above cases ???
                  - mutexes !!!
                  - many modern mechanisms are available with 
                    threads and threading libraries - we will
                    explore them as needed !! 



Note: for most of the above cases and below discussions, we are
      assuming that threads are of the same process - if you 
      have questions about threads of different processes, 
      most concepts and mechanisms that we discussed earlier
      apply - in addition, there will be some more mechanisms
      that will available from the thread libraries, also !!!
      most of the doubts will be cleared during programming
      using threading APIs and threading mechanisms !!!


3. what is the support for multi-threading in an 
   application / program/process, given by operating system  ??

   - you may learn multithreading from operating system / process
     point of view !!!
     -a process descriptor manages several thread descriptors 
      - each thread descriptor manages a thread of the process !!!
           - maintains all the thread related info.
           - a thread is scheduled by the scheduler with 
             the help of td's scheduling params 
           - a thread may be blocked in a wq of a resource
             with the help of td of the respective thread
           - certain signal masks are managed in td and
             via signals we can control a thread !!!  
           - the main dynamic, execution entity in a process
             is athread and it is controlled via td of that thread !!!
     - td of each thread is supposed to manage a thread with the
       help of fields of td and pd/associated objects 
     - td maintains following info:
          - kernel stack of a thread 
          - td manages tid of a thread - which is the identity 
            of a thread !!!
          - manages pd of the thread - this enables to identify 
            process of a thread !!!
                     - for resources !!! process identity as well !!!
          - save areas of a thread are managed by kernel stack 
            of the thread  - process no longer owns a kernel stack
            - process no longer owns an userspace stack !!!
          - td manages scheduling parameters of a thread - in turn,
            td/thread  is scheduled - in a system that supports
            multithreading, tds are managed in ready queues of
            scheduler - pds are not managed in ready queues of 
            scheduler !!! each thread has its own merit for 
            scheduling - meaning, each thread is capable of 
            being scheduled by the scheduler !!!
          - td is used to block a thread of a process in a wq
            of the relevant resource !!! once again, td is used
            to manage a thread - pds are no longer used to 
            block a process - in a system that supports multithreading,
            a process is never blocked, threads are - in fact, 
            this is one of the main reasons for responsiveness !!!  
          - if a thread of a process is blocked, other threads of 
            the process may still be scheduled !!
          - each thread of a process may be assigned different 
            scheduling policies or different scheduling priorities !!!
          - how is a piece of code of a process associated with 
            a thread ?? address of a piece of code of the process
            will be used to initialize program counter of 
            thread context !!!
          - how is a user-space stack associated with a thread
            of a process ?? meaning, how different threads 
            of a process are assigned different user-space stacks ??
              - it is assigned by using appropriate values
                for stack pointer in the thread's context -
                for each user-space stack of a thread, a new
                VAD is created !!! for each new VAD, a new set
                of secondary page tables and ptes - eventually,
                a new set of page-frames !!!
                   - can you visualize and when is the above
                     user-stack association done ?? thread creation !!!

          - how is the data section of a process associated with 
            threads of a process ???
              - virtual addresses of VADs of data sections are
                visible to all threads of a process !!!


          - how is the heap section of a process associated with 
            threads of a process ???

               - via VADs 
          
          - how are the VADs of a process related to threads of 
            a process ??

               - all VADs are shared by all threads of a process


          - how are the page - tables of a process related to threads
            of a process ??


               - page tables are shared among all threads of a 
                 process !!!
               - due to this physical memory/page-frames are
                 shared among threads !!


          - how are threads maintained in the system with respect to 
            scheduling ???

               - ready queues now contain tds, not pds 


   - you may learn multithreading from application/frame-work 
     point of view !!!
   - it is as per your requirement !!! 


4. what are the differences between multithreading and multiple processes ??

   - each process has its own address space and physical memory -
     with its own pd
   - threads of a process shared address space and physical memory 
     of  a process - no new pds are created, light weight tds are 
     created !!
             - most of the resources and respective objects 
               are also shared!!!


   - by default, a process cannot access data space of another process
   - by default, all threads of a process can access data space of 
                 the process 
          - data-exchange between threads of a process are lighter
            and faster !!! do not need system call APIs for 
            data -exchange !!!

   - whenever there is a process switch, it is expensive, since
     address space is changed !!!
             - refer to virtual memory discussion of processes 


   - whenever there is a thread switch between threads of the same 
     process, it is less expensive !!!
              - refer to virtual memory discussion of processes 



   - based on all the above merits, threads yield following 
     advantages :
          - better responsiveness
          - faster, lighter and flexible IPC 
          - convenient for most applications 
          - uses less resources compared to processes
          - can improve throughput of a multithreaded application 
             , in multiprocessor environment !!!
                 - parallel execution of threads of a process !!
                 - refer to sample1.c and prove that multiple
                   threads of a process can improve performance
                   on a multiprocessor system - if not , what are
                   the reasons ??? 
5. what is the relationship between a process and threads of a process ??

    - covered in the above discussion 
 
    - if a process terminates normally or abnormally, all threads
      of the process are terminated !!!

    - if a thread of a process is terminated abnormally, all 
      threads of the process will be terminated abnormally by 
      the system !!
 
    - if a thread is terminated normally, other threads need not 
      be terminated - in any case, it is the decision of th e
      developer / application !!!

    - what happens if we generate SIGKILL to a multithreaded process ?
        - all threads will be abnormally terminated and process
          will also be ???

    - what happens if a thread is directed SIGSEGV signal by the
      system due to an illegal memory access ??
        - all threads will be terminated abnormally and 
          process will be terminated ???

    - a process will be terminated, when the last thread 
      of the process terminates, normally - in this context, 
      we are assuming that threads are terminated normally !!!
 
    - when a thread terminates, any resources held by the 
      thread are not freed by the system - it is the responsibility 
      of the developer to free resources before termination !!!
      - if this is not taken care, there may be resource leakage
        in a process/application !!! when a thread terminates,
        normally !!!

    - if an API/library function is safe to be used in single 
      threaded process environment, it may not be safe to 
      use the same in a multi-threaded process environment !!!
      - meaning, for a library API or any other function to
        be used safely in multithreaded environment, certain 
       rules must be satisfied !!!
            - what is meant by a multithreading safe library 
              API ???


            - what do you mean by multithreading unsafe
              library API ???



      - let us take an example of some API that uses a global 
        variable/buffer/data-structure, when it is invoked !!
        - do you see any problem, when it is used in 2 concurrent 
          processes ???
              - no problem !!! using separate variable/buffer/
                data-structure, in different address spaces 

        - do you see any problem, when it is used in 2 concurrent 
          threads of a process ???
              - yes, there will be race-conditions !!!
              - one way to solve is using locks - say, 
                mutex lock or semaphore lock !!!
              - if an API may be rewritten such that it 
                uses different objects even in multi-threaded
                environment, it is acceptable - such rewritten
                APIs are known as reentrant, thread-safe APIs
              - refer to man strerror or several such 
                APIs and man pages for more on reentrant APIs

                  - strerror() is not thread safe - is not
                    reentrant !!! why ???
                  
                  - strerror_r() is thread safe  - is reentrant !!
                    why ??? 


              - malloc() and friends are not thread safe - 
                you cannot solve this using reentrant functions !!!
              - assuming there are 2 Threads executing concurrently 
                and accessing a non-reentrant API - when a thread
                is in the middle of using the API, there is a 
                possibility of preemption !!!  if there is a preemption 
                of TH1 and TH2 is scheduled, TH2 may end up using 
                the same non-reentrant API - this will lead to 
                race-condition !!!  
              - in the above case, if a reentrant API is used, 
                race-condition will not occur !!!


6. what is the relationship between process address space and threads of 
   a process ??
     - as discussed above !!!

7. what is the scheduling mechanism used to schedule threads of a process ??

           - all threads of all processes are maintained by 
             the scheduler's ready queues 
           - threads of a process are scheduled  as per their 
             merits with respect to other threads of other 
             processes, in the ready queues !!!
           - if a process is to be treated with higher importance,
             all threads of that process may be assigned priority
             based policy and higher priorities !!!



8. what are the typical problems faced in a multi-threading process ??

           - as discussed above


9. how to over come problems faced in a multi-threading process ???

  
           - as discussed above 


10. when will a process creation system call API be used in 
    the system ??

      - when a new process is to be created for a new
        application or program to be launched !!!


11. when will a thread creation system call API be used in 
    the system ???

       - when a new process created, a main thread will 
         be implicitly created using thread system cal l
         system routine !!!
       - when application/developer requires additional 
         threads for a process, thread creation system 
         call API may be invoked !!!
       - in reality, thread system call APIs are not directly 
         invoked - they are indirectly invoked via library 
         APIs - still, you must understand that the underlying 
         principles are the same !!!

12.in a scenario where you can use a thread or a process, 
   which will you use ??
     - if resources and processing power are sufficient,
       processes are preferred !!! 
          - reason1 - processes are more robust than threads
          - reason2 - processes are more isolated and secure !!!
     - in common applications, threads are still preferred,
       as they are less resource intensive and more efficient !!!

13. threading can be broadly classified as below:

    - kernel level threads - 1:1 model 

         - this is what is currently popular and we are discussing
           in modern systems !!!  they provide true multithreading !!!
         - there is one TD per user space thread created by the
           developer 
         - in this case as well, thread library is still present,
           but the thread library has been written such that
           they will create kernel level threads and also maintain
           certain information about kernel level threads, in user-space
           for programming and run-time convenience !!!!
         - in most cases, threading library APIs will invoke appropriate
           system call APIs of the underlying operating system - for instance,
           a thread creation library API may end up invoking thread creation
           system call API - using library APIs is far more convenient 
           than using system call APIs, in these cases - in short, for
           processes, using system call APIs is the best approach - for
           threads, using library APIs is the best practice - however,
           a multithreaded process is free to use process system call APIs
           along with threading library APIs, as needed !!! 

    
    - user level threads   - M:1 model 
           
         - these were provided in older systems - during the
           initial days of multi threading !!!
         - there is only one TD for all user space threads created
           by developer
         - user level threads are maintained by thread library and
           system may be unaware of the user-level threads 
         - this has a major draw back : ???
                - most of the benefits of multithreading are lost 
                - meaning, if a thread blocks,entire process blocks
                - from here, you can understand the consequences 

    - kernel threads 

          - these are threads created in the system space,
            managed by system space subsystems, scheduled by the
            regular cpu scheduler(s), but responsible for implementing
            functionaties for kernel subsystems, not user-space applications
          - kernel threads do not have user-space address space - they
            use code/data/kernel stack and dynamic memory of kernel - 
            we will see kernel threads more intimately during 
            driver development - there are several kernel threads
            used in several I/O subsystems !!! 
          - page-daemon is a kernel thread - it is responsible for 
            page stealing from user-space processes, when system's
            total free physicall memory is low 
          - idle process is a kernel thread - idle process is the process
            scheduled by the operating system, when the ready queue is 
            empty on a given processor - in short, when there are no processes/
            threads, in the ready queue of a processor,idle thread of the
            processor is scheduled by the scheduler - there is one idle thread
            per processor, in a modern day operating system !!!     


14. after multithreading has been introduced, wherever possible, 
    we will be using multiple threads, instead of processes -
    in addition, system will also be managing threads, in 
    most execution scenarios, not processes 

15. however, we will be working with NPTL threading library of 
    Linux, where library behaves as per POSIX standards, but 
    operating system support for NPTL is peculiar !!! meaning,
    pds are used, in the place of tds - if a process is single
    threaded, it contains a pd to represent the process and 
    it will also use the same pd to represent the only TD -
    if a process is multithreaded, first pd will be used 
    to manage the main() thread and new pds will be created
    to manage other TDs - in these contexts, pds are treated
    as tds and all pds, which are used as tds  of a process
    share the same set of resources - this is unlike parent
    and children case - in parent and children case, each pd
    represented a parent or child and they were allocated
    independent resource and objects that manage the resources-
    such implementation peculiarities are very common in Unix/linux
    systems - however,functioning of multithreading applications
    will be normal and library APIs used are also standard POSIX
    APIs !!  

16. read the threading section in chapter 6 of crowley for 
    certain implementation aspects of thread descriptor
    and threading management - these sections along with this
    text document can help you understand and work with threading
    APIs !!!      















